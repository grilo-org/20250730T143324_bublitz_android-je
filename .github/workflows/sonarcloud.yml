name: "SonarCloud Analysis"
on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}
jobs:
  sonar-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detectar a Raiz do Projeto (por Atividade Recente)
        id: find-root
        shell: bash
        run: |
          LATEST_TIMESTAMP=0
          PROJECT_DIR="."
          PROJECT_LIST=""
          PROJECT_COUNT=0
          
          ALL_PROJECTS=$(find . -name "settings.gradle" -o -name "settings.gradle.kts")
          
          if [ -n "$ALL_PROJECTS" ]; then
            for settings_file in $ALL_PROJECTS; do
              PROJECT_COUNT=$((PROJECT_COUNT+1))
              current_dir=$(dirname "$settings_file")
              PROJECT_LIST="$PROJECT_LIST\n- $current_dir"
              timestamp=$(git log -1 --format=%ct -- "$current_dir")
              if [ "$timestamp" -gt "$LATEST_TIMESTAMP" ]; then
                LATEST_TIMESTAMP=$timestamp
                PROJECT_DIR=$current_dir
              fi
            done
          fi
          
          if [ "$PROJECT_COUNT" -gt 1 ]; then
            ALERT_MESSAGE='--- ALERTA: MÚLTIPLOS PROJETOS DETECTADOS ---'
            echo "$ALERT_MESSAGE"
            echo "::warning::$ALERT_MESSAGE"
            echo "$ALERT_MESSAGE" > multi-project-alert.txt
            echo "Foram encontrados $PROJECT_COUNT projetos. O selecionado foi '$PROJECT_DIR'." >> multi-project-alert.txt
            echo "ALERT_FILE_CREATED=true" >> $GITHUB_ENV
          fi
          
          if [ "$LATEST_TIMESTAMP" -eq 0 ]; then
             path=$(find . -maxdepth 2 -name "pom.xml" -print -quit)
             if [ -n "$path" ]; then
                PROJECT_DIR=$(dirname "$path")
             fi
          fi
          
          echo "Projeto principal selecionado: $PROJECT_DIR"
          echo "PROJECT_PATH=$PROJECT_DIR" >> $GITHUB_ENV

      # LÓGICA DE SELEÇÃO DE JAVA CORRIGIDA E COM MAIS LOGS
      - name: Determine Java Version
        id: determine_java
        working-directory: ${{ env.PROJECT_PATH }}
        shell: bash
        run: |
          JAVA_VERSION='17' # Padrão moderno
          PROPERTIES_FILE="gradle/wrapper/gradle-wrapper.properties"

          echo "Procurando por $PROPERTIES_FILE..."
          if [ -f "$PROPERTIES_FILE" ]; then
            echo "Arquivo encontrado. Tentando extrair a versão do Gradle."
            # Usando grep com PCRE para uma extração mais robusta
            GRADLE_VERSION=$(grep -oP 'gradle-\K[0-9.]*(?=-)' "$PROPERTIES_FILE")
            echo "Versão do Gradle extraída: [$GRADLE_VERSION]"

            if [[ "$GRADLE_VERSION" == 4.* ]]; then
              echo "Gradle v4 detectado. Forçando o uso do Java 8."
              JAVA_VERSION='8'
            else
              echo "Gradle moderno (v$GRADLE_VERSION ou desconhecido). Usando Java 17."
            fi
          else
            echo "Arquivo $PROPERTIES_FILE não encontrado. Mantendo Java 17 como padrão."
          fi
          
          echo "Versão do Java selecionada para o proximo passo: $JAVA_VERSION"
          echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.determine_java.outputs.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Clean Local Properties & Inject Sonar Plugin
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          find . -name "local.properties" -type f -delete
          echo "" >> build.gradle
          echo "plugins { id 'org.sonarqube' version '3.4.0.2513' }" >> build.gradle

      - name: Build and Analyze Project
        id: build
        working-directory: ${{ env.PROJECT_PATH }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          BASE_SONAR_ARGS: "-Dsonar.projectKey=grilo-org_20250730T143324_bublitz_android-je -Dsonar.organization=grilo-org -Dsonar.host.url=https://sonarcloud.io -Dsonar.sources=app/src"
        shell: bash
        run: |
          echo "BUILD_SUCCESS=true" >> $GITHUB_ENV
          echo "SONAR_ANALYSIS_PERFORMED=true" >> $GITHUB_ENV

          if [ -f "pom.xml" ]; then
            mvn clean compile -DskipTests || echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
            echo "SONAR_ANALYSIS_PERFORMED=false" >> $GITHUB_ENV
            exit 0
          fi
          
          if [ -f "app/build.gradle" ]; then
            sed -i "/android {/a \    useLibrary 'org.apache.http.legacy'" app/build.gradle
          fi

          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew build sonarqube -Dsonar.login=$SONAR_TOKEN $BASE_SONAR_ARGS || echo "BUILD_SUCCESS=false" >> $GITHUB_ENV
          else
            echo "NEEDS_FALLBACK_GRADLE=true" >> $GITHUB_ENV
          fi

      - name: Setup Gradle (Fallback)
        if: env.NEEDS_FALLBACK_GRADLE == 'true'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: '6.7.1'
          cache-disabled: true

      - name: Run Gradle Build and Analysis (Fallback)
        if: env.NEEDS_FALLBACK_GRADLE == 'true'
        working-directory: ${{ env.PROJECT_PATH }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          BASE_SONAR_ARGS: "-Dsonar.projectKey=grilo-org_20250730T143324_bublitz_android-je -Dsonar.organization=grilo-org -Dsonar.host.url=https://sonarcloud.io -Dsonar.sources=app/src"
        shell: bash
        run: |
          if [ -f "app/build.gradle" ]; then
            sed -i "/android {/a \    useLibrary 'org.apache.http.legacy'" app/build.gradle
          fi

          gradle build sonarqube -Dsonar.login=$SONAR_TOKEN $BASE_SONAR_ARGS || echo "BUILD_SUCCESS=false" >> $GITHUB_ENV


      - name: SonarCloud Scan for Maven
        if: env.SONAR_ANALYSIS_PERFORMED == 'false'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ${{ env.PROJECT_PATH }}
          args: -Dsonar.projectKey=grilo-org_20250730T143324_bublitz_android-je -Dsonar.organization=grilo-org -Dsonar.host.url=https://sonarcloud.io -Dsonar.sources=app/src -Dsonar.java.binaries=target/classes

      - name: Upload Multi-Project Alert
        if: env.ALERT_FILE_CREATED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: multi-project-alert
          path: multi-project-alert.txt
